@startuml minesweeper_room

skinparam {

    DefaultFontColor White
    DefaultFontName Monospace
    DefaultFontSize 16
    DefaultBorderColor White
    ArrowColor Gray

    BackgroundColor Black
    BorderColor Gray
    FontColor White

    class {
        BackgroundColor Black
        BorderColor Gray
    }

    package {
        BackgroundColor Black
        BorderColor Gray
    }

}

package minesweeper_room {


    class GameStateUpdater {
        - _room_update_listeners: List[RoomUpdateListener]
        - _any_update_listeners: List[AnyUpdateListener]
        + notify_state_update(room_id: str, state: RoomState) -> None
        + add_room_update_listener(listener: RoomUpdateListener) -> None
        + add_any_update_listener(listener: AnyUpdateListener) -> None
    }

    class RoomState {
        - players: List[Player]
        - options: GameOptions
        - board: ShowBoard
        - is_won: bool
        - is_lost: bool
        + __init__(players: List[Player],\noptions: GameOptions,\nboard: ShowBoard,\nis_won: bool,\nis_lost: bool) -> None
        + to_dict() -> Dict[str, Any]
    }

    class RoomAPI {
        + create_room(options: GameOptions) -> str
        + join_room(room_id: str, player: Player) -> None
        + leave_room(room_id: str, player: Player) -> None
        + update_room_options(room_id: str, options: GameOptions) -> None
        + get_room_state(room_id: str) -> RoomState
    }

    class RoomRegistry {
        - _updater: GameStateUpdater
        - _rooms: Dict[str, RoomState]
        + __init__(updater: GameStateUpdater) -> None
        + new_room(options: GameOptions, room_id: str) -> None
        + add_player(room_id: str, player: Player) -> None
        + remove_player(room_id: str, player: Player) -> None
        + update_options(room_id: str, options: GameOptions) -> None
        + start_game(room_id: str) -> None
        + get_room_state(room_id: str) -> RoomState
    }

    class Player {

        - _name: str
        - _leave_callback: Callable[[Player], None]
        - _right_click_callback: Callable[[Player, Position], None]
        - _left_click_callback: Callable[[Player, Position], None]

        + __init__(name: str)
        + name() -> str
        + leave_room() -> None
        + right_click(position: Position) -> None
        + left_click(position: Position) -> None
        + to_dict() -> Dict[str, str]
        + set_leave_callback(callback: Callable[[Player], None]) -> None
        + set_right_click_callback(callback: Callable[[Player, Position], None]) -> None
        + set_left_click_callback(callback: Callable[[Player, Position], None]) -> None
        + reset_callbacks() -> None
        # standard_callback(*_) -> None

    }

    class GameOptions {

        - _mines: int
        - _width: int
        - _height: int

        + __init__(mines: int, width: int, height: int)
        + mines() -> int
        + width() -> int
        + height() -> int
        + to_dict() -> Dict[str, int]

    }

    class Room {

        - _players: List[Player]
        - _game: Optional[Minesweeper]
        - _options: GameOptions
        - _room_id: str

        + __init__(options: GameOptions, room_id: str) -> None
        + add_player(player: Player) -> None
        + remove_player(player: Player) -> None
        + update_options(options: GameOptions) -> None
        + start_game() -> None
        + is_won() -> bool
        + is_lost() -> bool
        + get_show_board() -> ShowBoard
        + get_game_options() -> GameOptions
        + get_players() -> List[Player]

    }

    RoomAPI -> RoomRegistry
    RoomRegistry --> RoomState
    RoomRegistry --> GameStateUpdater

    Room o-- Player
    Room *-- GameOptions

    RoomRegistry o-- Room

}

@enduml
