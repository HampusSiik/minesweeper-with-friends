@startuml model

skinparam {

    DefaultFontColor White
    DefaultFontName Monospace
    DefaultFontSize 16
    DefaultBorderColor White
    ArrowColor Gray

    BackgroundColor Black
    BorderColor Gray
    FontColor White

    class {
        BackgroundColor Black
        BorderColor Gray
    }

    package {
        BackgroundColor Black
        BorderColor Gray
    }

}

!define List(T) List[T]
!define string str
!define Optional(T) Optional[T]
!define Dict(T, U) Dict[T, U]

!definelong CELL_BODY()
    + is_mine() -> bool
    + is_flagged() -> bool
    + is_revealed() -> bool
    + unwraped() -> Cell
    + flagged() -> Cell
    + revealed() -> Cell
    + __str__() -> string
!enddefinelong

package minesweeper {

    package board {

        class Board {
            - board: List(List(CellContainer))
            + generate_board(width: int, height: int) -> None
            + place_mines(mines: int, start_position: Position) -> None
            + show_board() -> str
            + surrounding_mines(position: Position) -> int
            + show_nearby_mines() -> str
            + is_mine(position: Position) -> bool
            + is_flagged(position: Position) -> bool
            + is_revealed(position: Position) -> bool
            + toggle_flag(position: Position) -> None
            + shape() -> Tuple(int, int)
            + all_positions() -> List(Position)
            + mines() -> int
        }

    }

    package cells {

        protocol Cell {
            CELL_BODY()
        }

        class EmptyCell {
            CELL_BODY()
        }

        class MineCell {
            CELL_BODY()
        }

        class FlaggedCell {
            CELL_BODY()
        }

        class RevealedCell {
            CELL_BODY()
        }

        abstract CellWrapper {
            - _cell
            CELL_BODY()
        }

        abstract BaseCell {
            CELL_BODY()
        }

        class CellContainer {
            - _cell: Cell
            + is_mine() -> bool
            + is_flagged() -> bool
            + is_revealed() -> bool
            + unwraped() -> Cell
            + flag() -> None
            + reveal() -> None
            + toggle_flag() -> None
            # create_mine() -> CellContainer
            # create_empty() -> CellContainer
        }

        CellContainer *- Cell
        BaseCell <|-- EmptyCell
        BaseCell <|-- MineCell
        CellWrapper <|-- FlaggedCell
        CellWrapper <|-- RevealedCell
        Cell <|-- CellWrapper
        Cell <|-- BaseCell
        Cell --* CellWrapper
        FlaggedCell -> RevealedCell
        RevealedCell -> FlaggedCell
        BaseCell --> FlaggedCell
        BaseCell --> RevealedCell

    }

    package game {

        class MineSweeper {
            - _board: Board
            + shape() -> Tuple(int, int)
            + game_lost() -> bool
            + game_won() -> bool
            + left_click_cell(position: Position) -> None
            + right_click_cell(position: Position) -> None
            + generate_game(rows, cols, mines) -> None
        }

    }

    MineSweeper *- Board

    Board o-- CellContainer

}

@enduml